{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","images/covid-19-logo.png","App.js","reportWebVitals.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","className","styles","container","Grid","spacing","justify","item","xs","md","component","Card","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","map","positive","death","date","dateChecked","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","image","src","CovidLogo","alt","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.471a8708.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cx from 'classnames';\n\nimport styles from './Cards.module.css'\n\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate} }) =>{\n    console.log(confirmed)\n    if(!confirmed){\n        return 'Loading...'\n    }\n    \n\n    return(\n        <div className={styles.container}>\n      <Grid container spacing={3} justify=\"center\">\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.infected)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Infected\n            </Typography>\n            <Typography variant=\"h5\" component=\"h2\">\n              <CountUp start={0} end={confirmed.value} duration={2.75} separator=\",\" />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              No. of active cases of COVID-19.\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.recovered)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Recovered\n            </Typography>\n            <Typography variant=\"h5\" component=\"h2\">\n              <CountUp start={0} end={recovered.value} duration={2.75} separator=\",\" />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              No. of recoveries from COVID-19.\n            </Typography>\n          </CardContent>\n        </Grid>\n        <Grid item xs={12} md={3} component={Card} className={cx(styles.card, styles.deaths)}>\n          <CardContent>\n            <Typography color=\"textSecondary\" gutterBottom>\n              Deaths\n            </Typography>\n            <Typography variant=\"h5\" component=\"h2\">\n              <CountUp start={0} end={deaths.value} duration={2.75} separator=\",\" />\n            </Typography>\n            <Typography color=\"textSecondary\">\n              {new Date(lastUpdate).toDateString()}\n            </Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              No. of deaths caused by COVID-19.\n            </Typography>\n          </CardContent>\n        </Grid>\n      </Grid>\n    </div>\n    )\n}\n\nexport default Cards;","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api'\n\nexport const fetchData = async  (country) => {\n  let changeableUrl =  url;\n\n  if(country){\n    changeableUrl = `${url}/countries/${country}`\n  }\n\n\n    try {\n        const { data: { confirmed, recovered, deaths, lastUpdate } }= await axios.get(changeableUrl);\n\n        return { confirmed, recovered, deaths, lastUpdate }   \n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const fetchDailyData = async () => {\n    try {\n      const { data } = await axios.get('https://api.covidtracking.com/v1/us/daily.json');\n\n      return data.map(({ positive, recovered, death, dateChecked: date }) => ({ confirmed: positive, recovered, deaths: death, date }));\n    } catch (error) {\n      return error;\n    }\n  };\n\n  export const fetchCountries = async () => {\n    try {\n      const {data : {countries}}= await  axios.get(`${url}/countries`)\n\n      return countries.map((country)=> country.name);\n      \n    } catch(error) {\n       return error;\n    }\n  }","import React, {useState, useEffect} from 'react';\nimport {fetchDailyData} from '../../api';\nimport {Line, Bar} from 'react-chartjs-2';\n\nimport styles from './Chart.module.css';\n\n\nconst Chart = ({data: {confirmed, deaths, recovered}, country}) =>{\n    const [dailyData, setDailyData] = useState({});\n\n    useEffect(()=>{\n        const fetchAPI = async() =>{\n          setDailyData (await fetchDailyData());\n        }\n\n        console.log(dailyData);\n\n        fetchAPI();\n    }, [])\n\n    const lineChart = (\n       dailyData.length ? (<Line\n            data={{\n                labels: dailyData.map(({date}) => date),\n                datasets: [{\n                    data: dailyData.map(({confirmed})=> confirmed),\n                    label: 'Infected',\n                    borderColor: '#3333ff',\n                    fill: true,\n\n                }, {\n                    data: dailyData.map(({deaths})=> deaths),\n                    label: 'Deaths',\n                    borderColor: 'red',\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\n                    fill: true,  \n                }],\n            }}\n        />) : null\n    );\n\n    const barChart = (\n        confirmed ? (\n            <Bar\n                data={{\n                    labels: ['Infected', 'Recovered', 'Deaths'],\n                    datasets: [{\n                        label: 'People',\n                        backgroundColor: ['rgba(0, 0, 255, 0.5)',\n                         'rgba(255, 0, 0, 0.5',\n                         'rgba(255, 0, 0, 0.5)'],\n                         data: [confirmed.value, recovered.value, deaths.value]\n                    }]\n                }}\n                options ={{\n                    legend: {display: false},\n                    title: {display: true, text: `Current state in ${country}`}\n                }}\n             />\n        ) : null\n\n    )\n\n\n    return(\n        <div className={styles.container}>\n            {country ? barChart : lineChart}\n        </div>\n    )\n}\n\nexport default Chart;","import React, {useState, useEffect} from 'react';\nimport {NativeSelect, FormControl} from '@material-ui/core';\nimport {fetchCountries} from '../../api';\nimport styles from './CountryPicker.module.css';\n\nconst CountryPicker = ({handleCountryChange}) =>{\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n    useEffect(() => {\n       const fetchAPI = async() =>{\n           setFetchedCountries(await fetchCountries())\n       }\n       fetchAPI();\n    }, [setFetchedCountries])\n    return(\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\n                <option value=\"\">Global</option>\n                {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\n            </NativeSelect>\n        </FormControl>\n    )\n}\n\nexport default CountryPicker;","export default __webpack_public_path__ + \"static/media/covid-19-logo.9e5d4fc7.png\";","import React from 'react';\nimport {Cards, Chart, CountryPicker} from './components'\nimport { fetchData } from './api'\nimport styles from './App.module.css';\n\nimport CovidLogo from './images/covid-19-logo.png';\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: '',\n  }\n\n   async componentDidMount() {\n      const fetchedData = await fetchData();\n\n      this.setState({data: fetchedData})\n    }\n\nhandleCountryChange = async (country) =>{\n  const fetchedData = await fetchData(country);\n  \n  this.setState({data: fetchedData, country: country})\n}\n\n  render(){\n    const { data, country } = this.state;\n\n    return(\n      <div className={styles.container}>\n        <img className={styles.image} src={CovidLogo} alt=\"COVID-19 Logo\" />\n        <Cards data={data}/>\n        <CountryPicker handleCountryChange={this.handleCountryChange}/>\n        <Chart data={data} country={country}/>\n      </div>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};"],"sourceRoot":""}